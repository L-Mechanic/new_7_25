
## **game.h**

#pragma once
#define _CRT_SECURE_NO_WARNINGS 
#define ROW 3
#define COL 3
#include <stdio.h>
#include<stdlib.h>
#include<time.h>
void cleanboard(char board[ROW][COL], int row, int col);
void putboard(char board[ROW][COL], int row, int col); 
void playercheck(char board[ROW][COL], int row, int col);
void computercheck(char board[ROW][COL], int row, int col);

//玩家赢--‘*’
//电脑赢--‘%’
//平局----‘Q’
//继续----‘C’
char win(char board[ROW][COL], int row, int col);


## **game.c**

#include"game.h"

void cleanboard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0;i < row;i++)
	{
		for (j = 0;j < col;j++)
		{
			board[i][j] = ' ';
		}
	}
}
void putboard(char board[ROW][COL], int row, int col)
{
	int i = 0;
	//1.打印一行数据
	for (i = 0;i < row;i++)
	{
		int j = 0;
		for (j = 0;j < col;j++)
		{
			printf(" %c ", board[i][j]);
			if (j < col - 1)
				printf("|");
		}
		printf("\n");
		//2.打印分割行
		if (i < row - 1)
		{
			for (j = 0;j < col;j++)
			{
				printf("---");
				if (j < col - 1)
					printf("|");
			}
			printf("\n");
		}
	}
}
void playercheck (char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("玩家请下棋：>\n");
	while (1)
	{
		printf("玩家请输入下棋坐标：>\n");
		scanf("%d%d", &x,&y);
		//判断坐标不超出范围
		if (x >= 1 && x <= row && y >= 1 && y <= col)
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '*';
				break;
			}
			else
			{
				printf("该位置已经有棋子了\n");
			}
		}
		else
		{
			printf("坐标输入错误，请重新输入\n");
		}
	}

}
void computercheck(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("电脑请下棋：>\n");
	while (1)
	{
		x = rand() % row;
		y = rand() % col;
		if (board[x][y] == ' ')
		{
			board[x][y] = '%';
			break;
		}
	}
}
int full(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	for (x = 0;x < row;x++)
	{
		for (y = 0;y < col;y++)
		{
			if (board[x][y] == ' ')
			{
				return 0;
				break;
			}
		}
	}
	return 1;//满了
}
void win(char board[ROW][COL], int row, int col)//返回1为棋盘满了 返回0为棋盘没满
{                                               //即：满了=平局     没满=继续
	int i = 0;
	for (i = 0;i < row;i++)//横三行 胜利 判断
	{
		if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][2] != ' ')
			return board[i][0];
	}
	for (i = 0;i<col;i++)//竖三列 胜利 判断
	{
		if (board[0][i] == board[1][i] && board[0][i] == board[2][i] && board[0][i] != ' ')
			return board[0][i];
	}
	if (board[0][0] == board[1][1] && board[2][2] == board[1][1] && board[0][0] != ' ')//对角线胜利 判断
		return board[0][0];
	if (board[2][0] == board[1][1] && board[0][2] == board[1][1] && board[2][0] != ' ')//对角线胜利 判断
		return board[0][2];
	//判断平局 
	if (1 == full(board, ROW, COL))
		return 'Q';
	else
		return 'C';
}




## **test.c**

#include"game.h"
void menu()
{
	printf("*******************************************\n");
	printf("*********   1.paly     0.exit   ***********\n");
	printf("*******************************************\n");

}
void game()//游戏的算法，游戏机制
{
	int ret = 0;
	//存放棋盘
	char board[ROW][COL] = { 0 };
	//初始化棋盘
	cleanboard(board, ROW, COL);
	//打印棋盘
	putboard(board,ROW,COL);
	//下棋
	while (1)
	{
		//玩家下棋
		playercheck(board, ROW, COL);
		putboard(board, ROW, COL);
		//判断胜负
		ret = win(board, ROW, COL);
		if (ret != 'C')
			break;
		//电脑下棋
		computercheck(board, ROW, COL);
		putboard(board, ROW, COL);
		//判断胜负
		ret = win(board, ROW, COL);
		if (ret != 'C')
			break;
	}
	if (ret == '*')
		printf("玩家赢了\n");
	else if(ret == '%')
		printf("电脑赢\n");
	else 
		printf("平局\n");
}
int main()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do
	{
		
		menu();
		printf("请选择：>");
		scanf("%d",&input);
		switch(input)
		{
		case 1:
			printf("开始游戏\n");
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("输入错误，请重新输入\n");
			break;

		}
	} while (input);
	return 0;
}
